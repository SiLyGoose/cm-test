'use strict';

module.exports = function(Classroom) {
  Classroom.getClassroomWithEmptyCourses = function(cb) {
    var Course = Classroom.app.models.Course;
    // find filter is empty because classroom object only stores
    // courseId and organizationId
    //
    // we need to iterate through all the classrooms to check which
    // classroom is empty (aka no courses related to classroomId)
    Classroom.find({}, function(err, classrooms) {
      if (err) return cb(err);
      var classroomIds = classrooms.map(function(classroom) {
        return classroom.id;
      });

      // find all courses associated with classroom ids
      Course.find({where: {classroomId: {inq: classroomIds}}},
        function(err, courses) {
          if (err) return cb(err);

          // IMPORTANT NOTE: classroom and course id are generated by MongoDB,
          // which means the retrieval of the ids are type OBJECT. This is why
          // the toString() method is called so we are able to compare string ids.
          //
          // extract all classroom ids that have courses
          var classroomsWithCourses = new Set(courses.map(function(courses) {
            return courses.classroomId.toString();
          }));

          var classroomsWithEmptyCourses = classrooms.filter(
            function(classroom) {
              return !classroomsWithCourses.has(classroom.id.toString());
            });

          cb(null, classroomsWithEmptyCourses);
        }
      );
    });
  };

  Classroom.remoteMethod(
    'getClassroomWithEmptyCourses',
    {
      http: {
        path: '/getClassroomWithEmptyCourses',
        verb: 'get',
      },
      returns: {
        arg: 'classrooms',
        type: 'array',
      },
    }
  );
};
